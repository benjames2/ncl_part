; SMT functions for NCL Gates

; TH22 NCL Gate (A*B)
(set-logic QF_BV)

;Inputs
(declare-fun cs () (_ BitVec 1))
(declare-fun w () (_ BitVec 1))
(declare-fun x () (_ BitVec 1))
(declare-fun y () (_ BitVec 1))
(declare-fun z () (_ BitVec 1))



; This funtion finds the next state of the output of a 2 input NCL gate with threshold 1
; a, b : inputs

(define-fun TH12 ( (cs (_ BitVec 1)) (a (_ BitVec 1)) (b (_ BitVec 1)) ) (_ BitVec 1)
				
		(ite									
			(and (= a (_ bv0 1)) (= b (_ bv1 1))) (_ bv1 1)
				(ite
					(and (= a (_ bv1 1)) (= b (_ bv0 1))) (_ bv1 1)
						(ite
							(and (= a (_ bv1 1)) (= b (_ bv1 1))) (_ bv1 1)
							( ite 
								(and (= a (_ bv0 1)) (= b (_ bv0 1))) (_ bv0 1) cs
							) 
						)
				)
				
		)
			
)

; This funtion finds the next state of the output of a 2 input NCL gate with threshold 1
; a, b : inputs

(define-fun TH22 ( (cs (_ BitVec 1)) (a (_ BitVec 1)) (b (_ BitVec 1)) ) (_ BitVec 1)
				
		(ite									
			(and (= a (_ bv1 1)) (= b (_ bv1 1))) (_ bv1 1)
				( ite 
					(and (= a (_ bv0 1)) (= b (_ bv0 1))) (_ bv0 1) cs) 
			
			)
			
		)

; This funtion finds the next state of the output of a 2 input NCL gate with threshold 1
; a, b : inputs

(define-fun TH23 ( (cs (_ BitVec 1)) (a (_ BitVec 1)) (b (_ BitVec 1)) (c (_ BitVec 1)) ) (_ BitVec 1)
				
		(ite									
			(and (= a (_ bv1 1)) (= b (_ bv1 1))) (_ bv1 1)
				(ite
					(and (= a (_ bv1 1)) (= c (_ bv1 1))) (_ bv1 1)
						(ite
							(and (= b (_ bv1 1)) (= c (_ bv1 1))) (_ bv1 1)
							( ite 
								(and (= a (_ bv0 1)) (= b (_ bv0 1))) (_ bv0 1)
								( ite 
									(and (= a (_ bv0 1)) (= c (_ bv0 1))) (_ bv0 1)
										( ite 
											(and (= b (_ bv0 1)) (= c (_ bv0 1))) (_ bv0 1) cs
										) 
								) 
							)
								
						)
				)
				
		)
			
)

; This funtion finds the next state of the output of a 2 input NCL gate with threshold 1
; a, b : inputs

(define-fun TH34w2 ( (cs (_ BitVec 1)) (a (_ BitVec 1)) (b (_ BitVec 1)) (c (_ BitVec 1)) (d (_ BitVec 1)) ) (_ BitVec 1)
				
		(ite									
			(and (= a (_ bv1 1)) (= b (_ bv1 1))) (_ bv1 1)
				(ite
					(and (= a (_ bv1 1)) (= c (_ bv1 1))) (_ bv1 1)
						(ite
							(and (= a (_ bv1 1)) (= d (_ bv1 1))) (_ bv1 1)
								( ite 
									(and (= b (_ bv1 1)) (= c (_ bv1 1)) (= d (_ bv1 1))) (_ bv1 1)
										( ite 
											(and (= a (_ bv0 1)) (= b (_ bv0 1))) (_ bv0 1)
												( ite 
													(and (= a (_ bv0 1)) (= c (_ bv0 1))) (_ bv0 1)
														( ite 
															(and (= a (_ bv0 1)) (= d (_ bv0 1))) (_ bv0 1)
																( ite 
																	(and (= b (_ bv0 1)) (= c (_ bv0 1)) (= d (_ bv0 1))) (_ bv0 1) cs
																) 
														) 
												)
								
										)
								)
				
						)
				)
		)
)

;-----------------------------------------------------------------------------------------------------------------------------------------------------------------
(declare-fun ncl_wire1() (_ BitVec1))
(declare-fun ncl_wire2() (_ BitVec1))
(declare-fun ncl_wire3() (_ BitVec1))
(declare-fun ncl_wire4() (_ BitVec1))
(declare-fun ncl_wire5() (_ BitVec1))
(declare-fun ncl_wire6() (_ BitVec1))
(declare-fun cs_ 7() (_ BitVec1))
(declare-fun cs_ 8() (_ BitVec1))
(declare-fun cs_ 9() (_ BitVec1))
(declare-fun cs_ 10() (_ BitVec1))
(declare-fun wire1() (_ BitVec1))
(declare-fun wire2() (_ BitVec1))
(declare-fun wire3() (_ BitVec1))

(assert

   (not

       (let ((ncl_wire7 (TH23 cs_7 ncl_wire1 ncl_wire3 ncl_wire5)))

       (let ((ncl_wire8 (TH23 cs_8 ncl_wire2 ncl_wire4 ncl_wire6)))

       (let ((ncl_wire9 (TH34w2 cs_9 ncl_wire8 ncl_wire3 ncl_wire5 ncl_wire1)))

       (let ((ncl_wire10 (TH34w2 cs_10 ncl_wire7 ncl_wire6 ncl_wire4 ncl_wire2)))


       (let ((wire4 (bvxor wire1 wire2)))

       (let ((wire5 (bvand wire1 wire3)))

       (let ((wire6 (bvand wire3 wire2)))

       (let ((wire7 (bvand wire2 wire1)))

       (let ((wire8 (bvxor wire4 wire3)))

       (let ((wire9 (bvor wire5 wire6 wire7)))


       (=> (and (not (and (= ncl_wire4 (_ bv1 1)) (= ncl_wire3 (_ bv1 1))))
                (= ncl_wire4 wire1)
                (not (and (= ncl_wire6 (_ bv1 1)) (= ncl_wire5 (_ bv1 1))))
                (= ncl_wire6 wire2)
                (not (and (= ncl_wire2 (_ bv1 1)) (= ncl_wire1 (_ bv1 1))))
                (= ncl_wire2 wire3)
                (= ncl_wire10 (bvnot ncl_wire9))
                (= ncl_wire8 (bvnot ncl_wire7)))
           (and
                (= ncl_wire10 wire8)
                (= ncl_wire8 wire9)))))))))))))))

(check-sat)
(get-model)
(get-value(ncl_wire3))
(get-value(ncl_wire4))
(get-value(ncl_wire5))
(get-value(ncl_wire6))
(get-value(ncl_wire1))
(get-value(ncl_wire2))
(get-value(wire1))
(get-value(wire2))
(get-value(wire3))
